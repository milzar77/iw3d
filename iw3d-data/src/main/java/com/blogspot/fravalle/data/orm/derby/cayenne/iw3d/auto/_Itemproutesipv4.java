package com.blogspot.fravalle.data.orm.derby.cayenne.iw3d.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.ExpressionFactory;
import org.apache.cayenne.exp.Property;

/**
 * Class _Itemproutesipv4 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Itemproutesipv4 extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final Property<Integer> ITRID4_PK_PROPERTY = Property.create(ExpressionFactory.dbPathExp("ITRID4"), Integer.class);
    public static final String ITRID4_PK_COLUMN = "ITRID4";

    public static final Property<Integer> ITIWID4 = Property.create("itiwid4", Integer.class);
    public static final Property<String> ITRDOMAINNAME = Property.create("itrdomainname", String.class);
    public static final Property<Short> ITRHOP = Property.create("itrhop", Short.class);
    public static final Property<String> ITRIPADDRESS = Property.create("itripaddress", String.class);
    public static final Property<Short> ITRIPCLASSA = Property.create("itripclassa", Short.class);
    public static final Property<Short> ITRIPCLASSB = Property.create("itripclassb", Short.class);
    public static final Property<Short> ITRIPCLASSC = Property.create("itripclassc", Short.class);
    public static final Property<Short> ITRIPCLASSD = Property.create("itripclassd", Short.class);

    protected int itiwid4;
    protected String itrdomainname;
    protected short itrhop;
    protected String itripaddress;
    protected short itripclassa;
    protected short itripclassb;
    protected short itripclassc;
    protected short itripclassd;


    public void setItiwid4(int itiwid4) {
        beforePropertyWrite("itiwid4", this.itiwid4, itiwid4);
        this.itiwid4 = itiwid4;
    }

    public int getItiwid4() {
        beforePropertyRead("itiwid4");
        return this.itiwid4;
    }

    public void setItrdomainname(String itrdomainname) {
        beforePropertyWrite("itrdomainname", this.itrdomainname, itrdomainname);
        this.itrdomainname = itrdomainname;
    }

    public String getItrdomainname() {
        beforePropertyRead("itrdomainname");
        return this.itrdomainname;
    }

    public void setItrhop(short itrhop) {
        beforePropertyWrite("itrhop", this.itrhop, itrhop);
        this.itrhop = itrhop;
    }

    public short getItrhop() {
        beforePropertyRead("itrhop");
        return this.itrhop;
    }

    public void setItripaddress(String itripaddress) {
        beforePropertyWrite("itripaddress", this.itripaddress, itripaddress);
        this.itripaddress = itripaddress;
    }

    public String getItripaddress() {
        beforePropertyRead("itripaddress");
        return this.itripaddress;
    }

    public void setItripclassa(short itripclassa) {
        beforePropertyWrite("itripclassa", this.itripclassa, itripclassa);
        this.itripclassa = itripclassa;
    }

    public short getItripclassa() {
        beforePropertyRead("itripclassa");
        return this.itripclassa;
    }

    public void setItripclassb(short itripclassb) {
        beforePropertyWrite("itripclassb", this.itripclassb, itripclassb);
        this.itripclassb = itripclassb;
    }

    public short getItripclassb() {
        beforePropertyRead("itripclassb");
        return this.itripclassb;
    }

    public void setItripclassc(short itripclassc) {
        beforePropertyWrite("itripclassc", this.itripclassc, itripclassc);
        this.itripclassc = itripclassc;
    }

    public short getItripclassc() {
        beforePropertyRead("itripclassc");
        return this.itripclassc;
    }

    public void setItripclassd(short itripclassd) {
        beforePropertyWrite("itripclassd", this.itripclassd, itripclassd);
        this.itripclassd = itripclassd;
    }

    public short getItripclassd() {
        beforePropertyRead("itripclassd");
        return this.itripclassd;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "itiwid4":
                return this.itiwid4;
            case "itrdomainname":
                return this.itrdomainname;
            case "itrhop":
                return this.itrhop;
            case "itripaddress":
                return this.itripaddress;
            case "itripclassa":
                return this.itripclassa;
            case "itripclassb":
                return this.itripclassb;
            case "itripclassc":
                return this.itripclassc;
            case "itripclassd":
                return this.itripclassd;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "itiwid4":
                this.itiwid4 = val == null ? 0 : (int)val;
                break;
            case "itrdomainname":
                this.itrdomainname = (String)val;
                break;
            case "itrhop":
                this.itrhop = val == null ? 0 : (short)val;
                break;
            case "itripaddress":
                this.itripaddress = (String)val;
                break;
            case "itripclassa":
                this.itripclassa = val == null ? 0 : (short)val;
                break;
            case "itripclassb":
                this.itripclassb = val == null ? 0 : (short)val;
                break;
            case "itripclassc":
                this.itripclassc = val == null ? 0 : (short)val;
                break;
            case "itripclassd":
                this.itripclassd = val == null ? 0 : (short)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.itiwid4);
        out.writeObject(this.itrdomainname);
        out.writeShort(this.itrhop);
        out.writeObject(this.itripaddress);
        out.writeShort(this.itripclassa);
        out.writeShort(this.itripclassb);
        out.writeShort(this.itripclassc);
        out.writeShort(this.itripclassd);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.itiwid4 = in.readInt();
        this.itrdomainname = (String)in.readObject();
        this.itrhop = in.readShort();
        this.itripaddress = (String)in.readObject();
        this.itripclassa = in.readShort();
        this.itripclassb = in.readShort();
        this.itripclassc = in.readShort();
        this.itripclassd = in.readShort();
    }

}
